local conditions = require("heirline.conditions")
local utils = require("heirline.utils")

local Space = { provider = " " }
local Align = { provider = "%=" }

local ViMode = {
  -- get vim current mode, this information will be required by the provider
  -- and the highlight functions, so we compute it only once per component
  -- evaluation and store it as a component attribute
  init = function(self)
    self.mode = vim.fn.mode(1) -- :h mode()
  end,
  -- Now we define some dictionaries to map the output of mode() to the
  -- corresponding string and color. We can put these into `static` to compute
  -- them at initialisation time.
  static = {
    mode_names = { -- change the strings if you like it vvvvverbose!
      n = "N",
      no = "N?",
      nov = "N?",
      noV = "N?",
      ["no\22"] = "N?",
      niI = "Ni",
      niR = "Nr",
      niV = "Nv",
      nt = "Nt",
      v = "V",
      vs = "Vs",
      V = "V_",
      Vs = "Vs",
      ["\22"] = "^V",
      ["\22s"] = "^V",
      s = "S",
      S = "S_",
      ["\19"] = "^S",
      i = "I",
      ic = "Ic",
      ix = "Ix",
      R = "R",
      Rc = "Rc",
      Rx = "Rx",
      Rv = "Rv",
      Rvc = "Rv",
      Rvx = "Rv",
      c = "C",
      cv = "Ex",
      r = "...",
      rm = "M",
      ["r?"] = "?",
      ["!"] = "!",
      t = "T",
    },
  },
  -- We can now access the value of mode() that, by now, would have been
  -- computed by `init()` and use it to index our strings dictionary.
  -- note how `static` fields become just regular attributes once the
  -- component is instantiated.
  -- To be extra meticulous, we can also add some vim statusline syntax to
  -- control the padding and make sure our string is always at least 2
  -- characters long. Plus a nice Icon.
  provider = function(self)
    -- return "ÓüÖ %2("..self.mode_names[self.mode].."%)"
    -- return " %2("..self.mode_names[self.mode].."%)"
    return "ÓüÖ %2(" .. self.mode_names[vim.fn.mode(1)] .. "%)"
  end,
  -- Same goes for the highlight. Now the foreground will change according to the current mode.
  hl = function(self)
    local mode = self.mode:sub(1, 1) -- get only the first mode character
    return { fg = self.mode_colors_map[mode], bold = true, }
  end,
  -- Re-evaluate the component only on ModeChanged event!
  -- Also allows the statusline to be re-evaluated when entering operator-pending mode
  update = {
    "ModeChanged",
    pattern = "*:*",
    callback = vim.schedule_wrap(function()
      vim.cmd("redrawstatus")
    end),
  },
}

local FileFormat = {
  provider = function()
    local fmt = vim.bo.fileformat
    -- return fmt ~= 'unix' and fmt:upper()
    if fmt == "unix" then
      return "Ôåö UNIX"
    elseif fmt == "mac" then
      return "Óúë MAC"
    elseif fmt == "dos" then
      return "Óò™ DOS"
    else
      return fmt:upper()
    end
  end
}

-- We're getting minimalists here!
local Ruler = {
  -- %l = current line number
  -- %L = number of lines in the buffer
  -- %c = column number
  -- %P = percentage through file of displayed window
  -- provider = "%7(%l/%3L%):%2c %P",
  provider = "%7(%l/%3L%):%2c",
  hl = function()
    local position = math.floor(vim.api.nvim_win_get_cursor(0)[1] / vim.api.nvim_buf_line_count(0) * 100)
    local fg

    if position <= 5 then
      fg = "aqua"
    elseif position >= 95 then
      fg = "red"
    else
      fg = "purple"
    end
    return {
      fg = fg,
      bold = true,
      bg = "black",
    }
  end,
}

-- I take no credits for this! :lion:
local ScrollBar ={
  static = {
    sbar = { '‚ñÅ', '‚ñÇ', '‚ñÉ', '‚ñÑ', '‚ñÖ', '‚ñÜ', '‚ñá', '‚ñà' }
    -- Another variant, because the more choice the better.
    -- sbar = { 'ü≠∂', 'ü≠∑', 'ü≠∏', 'ü≠π', 'ü≠∫', 'ü≠ª' }
  },
  -- provider = function(self)
  --   local curr_line = vim.api.nvim_win_get_cursor(0)[1]
  --   local lines = vim.api.nvim_buf_line_count(0)
  --   local i = math.floor((curr_line - 1) / lines * #self.sbar) + 1
  --   return string.rep(self.sbar[i], 2)
  -- end,
  provider = function()
    local chars = {
      "Óèà ",
      "Óèâ ",
      "Óèä ",
      "Óèã ",
      "Óèå ",
      "Óèç ",
      "Óèé ",
      "Óèè ",
      "Óèê ",
      "Óèë ",
      "Óèí ",
      "Óèì ",
      "Óèî ",
      "Óèï ",
      "Óèñ ",
      "Óèó ",
      "Óèò ",
      "Óèô ",
      "Óèö ",
      "Óèõ ",
      "Óèú ",
      "Óèù ",
      "Óèû ",
      "Óèü ",
      "Óè† ",
      "Óè° ",
      "Óè¢ ",
      "Óè£ ",
    }
    local line_ratio = vim.api.nvim_win_get_cursor(0)[1] / vim.api.nvim_buf_line_count(0)
    local position = math.floor(line_ratio * 100)

    if position <= 5 then
      position = "ÔáÆ TOP"
    elseif position >= 95 then
      position = "ÔäÖ BOT"
    else
      position = chars[math.floor(line_ratio * #chars)] .. position
    end
    return position
  end,
  -- hl = { fg = "blue", bg = "bright_bg" },
  hl = function()
    local position = math.floor(vim.api.nvim_win_get_cursor(0)[1] / vim.api.nvim_buf_line_count(0) * 100)
    local fg

    if position <= 5 then
      fg = "aqua"
    elseif position >= 95 then
      fg = "red"
    else
      fg = "purple"
    end
    return {
      fg = fg,
      bold = true,
      bg = "black",
    }
  end,
}

local FileNameBlock = {
  -- let's first set up some attributes needed by this component and it's children
  init = function(self)
    self.filename = vim.api.nvim_buf_get_name(0)
  end,
}
-- We can now define some children separately and add them later

local FileIcon = {
  init = function(self)
    local filename = self.filename
    local extension = vim.fn.fnamemodify(filename, ":e")
    self.icon, self.icon_color = require("nvim-web-devicons").get_icon_color(filename, extension, { default = true })
  end,
  provider = function(self)
    return self.icon and (self.icon .. " ")
  end,
  hl = function(self)
    return { fg = self.icon_color }
  end
}

local FileName = {
  provider = function(self)
    -- first, trim the pattern relative to the current directory. For other
    -- options, see :h filename-modifers
    local filename = vim.fn.fnamemodify(self.filename, ":.")
    if filename == "" then return "[No Name]" end
    -- now, if the filename would occupy more than 1/4th of the available
    -- space, we trim the file path to its initials
    -- See Flexible Components section below for dynamic truncation
    if not conditions.width_percent_below(#filename, 0.25) then
      filename = vim.fn.pathshorten(filename)
    end
    return filename
  end,
  hl = { fg = utils.get_highlight("Directory").fg },
}

local FileFlags = {
  {
    condition = function()
      return vim.bo.modified
    end,
    provider = "[+]",
    hl = { fg = "green" },
  },
  {
    condition = function()
      return not vim.bo.modifiable or vim.bo.readonly
    end,
    provider = "ÔÄ£",
    hl = { fg = "orange" },
  },
}

-- Now, let's say that we want the filename color to change if the buffer is
-- modified. Of course, we could do that directly using the FileName.hl field,
-- but we'll see how easy it is to alter existing components using a "modifier"
-- component

local FileNameModifer = {
  hl = function()
    if vim.bo.modified then
      -- use `force` because we need to override the child's hl foreground
      return { fg = "cyan", bold = true, force=true }
    end
  end,
}

-- let's add the children to our FileNameBlock component
FileNameBlock = utils.insert(FileNameBlock,
  FileIcon,
  utils.insert(FileNameModifer, FileName), -- a new table where FileName is a child of FileNameModifier
  FileFlags,
  { provider = '%<'} -- this means that the statusline is cut here when there's not enough space
)

-- ViMode = utils.surround({ "ÓÇ∂", "ÓÇ¥" }, function(self) return self:mode_color() end, { hl = { fg = "black" } })

local DefaultStatusline = {
  ViMode,
  Space,
  FileNameBlock,
  Align,
  FileFormat,
  Space,
  Ruler,
  Space,
  ScrollBar,
}

local StatusLines = {

  static = {
    mode_colors_map = {
      n = "red",
      i = "green",
      v = "cyan",
      V = "cyan",
      ["\22"] = "cyan",
      c = "orange",
      s = "purple",
      S = "purple",
      ["\19"] = "purple",
      R = "orange",
      r = "orange",
      ["!"] = "red",
      t = "green",
    },
    mode_color = function(self)
      local mode = conditions.is_active() and vim.fn.mode() or "n"
      return self.mode_colors_map[mode]
    end,
  },

  hl = function()
    if conditions.is_active() then
      return "StatusLine"
    else
      return "StatusLineNC"
    end
  end,

  -- the first statusline with no condition, or which condition returns true is used.
  -- think of it as a switch case with breaks to stop fallthrough.
  fallthrough = false,

  DefaultStatusline,
}

return StatusLines
