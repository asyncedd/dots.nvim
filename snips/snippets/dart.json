{
  "main": {
    "prefix": "main",
    "description": "Insert a main function, used as an entry point.",
    "body": [
      "main(List<String> args) {",
      "  $0",
      "}"
    ]
  },
  "try": {
    "prefix": "try",
    "description": "Insert a try/catch block.",
    "body": [
      "try {",
      "  $0",
      "} catch (${1:e}) {",
      "}"
    ]
  },
  "if": {
    "prefix": "if",
    "description": "Insert an if statement.",
    "body": [
      "if ($1) {",
      "  $0",
      "}"
    ]
  },
  "if else": {
    "prefix": "ife",
    "description": "Insert an if statement with an else block.",
    "body": [
      "if ($1) {",
      "  $0",
      "} else {",
      "}"
    ]
  },
  "switch case": {
    "prefix": "switch",
    "description": "Insert a switch statement.",
    "body": [
      "switch ($1) {",
      "  case $2:",
      "    $0",
      "    break;",
      "  default:",
      "}"
    ]
  },
  "for": {
    "prefix": "for",
    "description": "Insert a for loop.",
    "body": [
      "for (var i = 0; i < ${1:count}; i++) {",
      "  $0",
      "}"
    ]
  },
  "for in": {
    "prefix": "fori",
    "description": "Insert a for-in loop.",
    "body": [
      "for (var ${1:item} in ${2:items}) {",
      "  $0",
      "}"
    ]
  },
  "while": {
    "prefix": "while",
    "description": "Insert a while loop.",
    "body": [
      "while ($1) {",
      "  $0",
      "}"
    ]
  },
  "do while": {
    "prefix": "do",
    "description": "Insert a do-while loop.",
    "body": [
      "do {",
      "  $0",
      "} while ($1);"
    ]
  },
  "fun": {
    "prefix": "fun",
    "description": "Insert a function definition.",
    "body": [
      "${3:void} ${1:name}(${2:args}) {",
      "  $0",
      "}"
    ]
  },
  "typedef": {
    "prefix": "typedef",
    "description": "Insert a typedef.",
    "body": "typedef ${1:Type} ${2:Name}(${3:params});"
  },
  "test": {
    "prefix": "test",
    "description": "Insert a test block.",
    "body": [
      "test('$1', () {",
      "  $0",
      "});"
    ]
  },
  "group": {
    "prefix": "group",
    "description": "Insert a test group block.",
    "body": [
      "group('$1', () {",
      "  $0",
      "});"
    ]
  },
  "print message": {
    "prefix": "prm",
    "body": [
      "print('${1:message}');"
    ],
    "description": "Print message"
  },
  "Scaffold widget snippet": {
    "prefix": "fscaff",
    "body": [
      "Scaffold(",
      "  appBar: AppBar(",
      "    title: Text('${1:Title}'),",
      "  ),",
      "  body: ${2:Container()}${0},",
      ");"
    ],
    "description": "Scaffold widget snippet"
  },
  "EdgeInsets widget snippet with named constructor `all`": {
    "prefix": "fedgall",
    "body": [
      "EdgeInsets.all(${1:32.0})${0}"
    ],
    "description": "EdgeInsets widget snippet with named constructor `all`"
  },
  "Text widget snippet": {
    "prefix": "ftxt",
    "body": [
      "Text('${1:text}')${0}"
    ],
    "description": "Text widget snippet"
  },
  "Dart Public Instance variable snippet": {
    "prefix": "dinvar",
    "body": [
      "${1:dynamic} ${2:variableName}${0}"
    ],
    "description": "Instance variable snippet"
  },
  "Dart Private instance variable snippet": {
    "prefix": "dprinvar",
    "body": [
      "${1:dynamic} _${2:variableName};${0}"
    ],
    "description": "Dart Private instance variable snippet"
  },
  "Flutter initState lifecycle method snippet": {
    "prefix": "finitlf",
    "body": [
      "@override",
      "void initState() {",
      "  super.initState();",
      "  ${0}",
      "}"
    ],
    "description": "Flutter initState lifecycle method"
  },
  "Dart private method snippet": {
    "prefix": "dprmt",
    "body": [
      "${1:void} _${2:methodName}(${3}) ${4}{",
      "  ${0}",
      "}"
    ],
    "description": "Dart private method snippet"
  },
  "Dart optional named parameters constructor snippet": {
    "prefix": "dopnctor",
    "body": [
      "${1:constructorName}({${2}});${0}"
    ],
    "description": "Dart optional named parameters constructor snippet"
  },
  "Flutter Icon widget snippet": {
    "prefix": "fic",
    "body": [
      "Icon(Icons.${1:clear})${0}"
    ],
    "description": "Flutter Icon widget snippet"
  },
  "Flutter Container widget snippet": {
    "prefix": "fcont",
    "body": [
      "Container(",
      "  child: ${1:Widget}(${0}),",
      ")"
    ],
    "description": "Flutter Container widget snippet"
  },
  "Flutter Center widget snippet": {
    "prefix": "fcent",
    "body": [
      "Center(",
      "  child: ${1:Widget}(${0}),",
      ")"
    ],
    "description": "Flutter Center widget snippet"
  },
  "Flutter Row widget snippet": {
    "prefix": "frow",
    "body": [
      "Row(",
      "  children: <Widget>[${0}],",
      ")"
    ],
    "description": "Flutter Row widget snippet"
  },
  "Flutter Column widget snippet": {
    "prefix": "fcol",
    "body": [
      "Column(",
      "  children: <Widget>[${0}],",
      ")"
    ],
    "description": "Flutter Column widget snippet"
  },
  "SizedBox widget snippet with width and height arguments": {
    "prefix": "fszb",
    "body": [
      "SizedBox(width: ${1:0.0}, height: ${2:0.0})${0}"
    ],
    "description": "SizedBox widget with width and height arguments"
  },
  "SizedBox widget snippet with just width argument": {
    "prefix": "fszbw",
    "body": [
      "SizedBox(",
      "  width: ${1:0.0},${0}",
      ")"
    ],
    "description": "SizedBox widget snippet with just width argument"
  },
  "SizedBox widget snippet with just height argument": {
    "prefix": "fszbh",
    "body": [
      "SizedBox(",
      "  height: ${1:0.0},${0}",
      ")"
    ],
    "description": "SizedBox widget snippet with just height argument"
  },
  "Expand widget snippet": {
    "prefix": "fex",
    "body": [
      "Expanded(",
      "  child: ${1:null},${0}",
      ")"
    ],
    "description": "Expand widget snippet"
  },
  "EdgeInsets widget snippet with named constructor `only`": {
    "prefix": "fedgonly",
    "body": [
      "EdgeInsets.only(${1})${0}"
    ],
    "description": "EdgeInsets widget snippet with named constructor `only`"
  },
  "EdgeInsets widget snippet with symmetric contructor `symmetric`": {
    "prefix": "fedgsym",
    "body": [
      "EdgeInsets.symmetric(vertical: ${1:8.0}, horizontal: ${2:8.0},)${0}"
    ],
    "description": "EdgeInsets widget snippet with named constructor `symmetric`"
  },
  "EdgeInsets widget snippet with symmetric contructor `symmetric` with only vertical parameter": {
    "prefix": "fedgsymv",
    "body": [
      "EdgeInsets.symmetric(vertical: ${1:8.0},)${0}"
    ],
    "description": "EdgeInsets widget snippet with named constructor `symmetric` with only vertical parameter"
  },
  "EdgeInsets widget snippet with symmetric contructor `symmetric` with only horizontal parameter": {
    "prefix": "fedgsymh",
    "body": [
      "EdgeInsets.symmetric(horizontal: ${1:8.0},)${0}"
    ],
    "description": "EdgeInsets widget snippet with named constructor `symmetric` with only horizontal parameter"
  },
  "Dart `List` collection snippet": {
    "prefix": "dlist",
    "body": [
      "List<${1:dynamic}> ${2:listName}${0}"
    ],
    "description": "Dart `List` collection snippet"
  },
  "Dart `Map` collection snippet": {
    "prefix": "dmap",
    "body": [
      "Map<${1:dynamic}, ${2:dynamic}> ${3:mapName}${0}"
    ],
    "description": "Dart `Map` collection snippet"
  },
  "Dart `Set` collection snippet": {
    "prefix": "dset",
    "body": [
      "Set<${1:dynamic}> ${2:setName}${0}"
    ],
    "description": "Dart `Set` collection snippet"
  },
  "Dart arrow function getter snippet": {
    "prefix": "dgetarr",
    "body": [
      "${1:dynamic} get ${2:name} => ${3:returnValue};${0}"
    ],
    "description": "Dart arrow function getter snippet"
  },
  "Dart `import as` snippet": {
    "prefix": "dimpas",
    "body": [
      "import '${1:packageName}' as ${2:alias}${0};"
    ],
    "description": "Dart `import as` snippet"
  },
  "Dart `import show` snippet": {
    "prefix": "dimpshow",
    "body": [
      "import '${1:packageName}' show ${2:member}${0};"
    ],
    "description": "Dart `import show` snippet"
  },
  "Dart `import deffered as` snippet": {
    "prefix": "dimplazy",
    "body": [
      "import '${1:packageName}' deferred as ${2:alias}${0};"
    ],
    "description": "Dart `import deffered as` snippet"
  },
  "Dart `import hide` snippet": {
    "prefix": "dimphide",
    "body": [
      "import '${1:packageName}' hide ${2:excludedMember}${0};"
    ],
    "description": "Dart `import hide` snippet"
  },
  "Dart `export hide` snippet": {
    "prefix": "dexhide",
    "body": [
      "export '${1:file}' hide ${2:excludedMember}${0};"
    ],
    "description": "Dart `export hide` snippet"
  },
  "Dart `export show` snippet": {
    "prefix": "dexshow",
    "body": [
      "export '${1:file}' show ${2:member}${0};"
    ],
    "description": "Dart `export show` snippet"
  },
  "Dart public method snippet": {
    "prefix": "dmt",
    "body": [
      "${1:void} ${2:methodName}(${3}) ${4}{",
      "  ${0}",
      "}"
    ],
    "description": "Dart public method snippet"
  },
  "Dart `convert` lib import snippet": {
    "prefix": "dconvert",
    "body": [
      "import 'dart:convert'${0};"
    ],
    "description": "Dart `convert` lib import snippet"
  },
  "Dart `var` variable declaration snippet": {
    "prefix": "dvar",
    "body": [
      "var ${1:variableName}${0};"
    ],
    "description": "Dart `var` variable declaration snippet"
  },
  "Dart `final` variable declaration snippet": {
    "prefix": "dfinal",
    "body": [
      "final ${1:type} ${2:variableName} ${3:= }${0};"
    ],
    "description": "Dart `final` variable declaration snippet"
  },
  "Dart `const` variable declaration snippet": {
    "prefix": "dconst",
    "body": [
      "const ${1:type} ${2:variableName} ${3:= }${0};"
    ],
    "description": "Dart `const` variable declaration snippet"
  },
  "Dart public arrow function snippet": {
    "prefix": "darr",
    "body": [
      "${1:Object} ${2:methodName}(${3}) ${4}=> ${0};"
    ],
    "description": "Dart public arrow function snippet"
  },
  "Dart private arrow function snippet": {
    "prefix": "dprarr",
    "body": [
      "${1:Object} _${2:methodName}(${3}) ${4}=> ${0};"
    ],
    "description": "Dart private arrow function snippet"
  },
  "Add material's package import statement": {
    "prefix": "fimpmat",
    "body": [
      "import 'package:flutter/material.dart';"
    ],
    "description": "Add material's package import statement"
  },
  "Flutter StreamBuilder widget snippet": {
    "prefix": "fstream",
    "body": [
      "StreamBuilder<${1:dynamic}>(        ",
      "  stream: ${2:yourStream},",
      "  builder: (BuildContext context, AsyncSnapshot<${1:dynamic}> snapshot) {",
      "      if (snapshot.hasData) {",
      "       // TODO: do something with the data",
      "       return ${3:Container()};",
      "      } else if (snapshot.hasError) {",
      "      // TODO: do something with the error",
      "       return ${4:Text(snapshot.error.toString())};",
      "      }",
      "      // TODO: the data is not ready, show a loading indicator",
      "      return ${5:Center(child: CircularProgressIndicator())};",
      "   },",
      ")"
    ],
    "description": "Flutter StreamBuilder widget snippet"
  },
  "Stateless Widget": {
    "prefix": "statelessW",
    "body": [
      "class ${1:name} extends StatelessWidget {",
      "  const ${1:name}({Key? key}) : super(key: key);\n",
      "  @override",
      "  Widget build(BuildContext context) {",
      "    return Container(",
      "      child: ${2:child},",
      "    );",
      "  }",
      "}"
    ],
    "description": "Create a Stateless widget"
  },
  "Stateful Widget": {
    "prefix": "statefulW",
    "body": [
      "class ${1:name} extends StatefulWidget {",
      "  ${1:name}({Key? key}) : super(key: key);\n",
      "  @override",
      "  _${1:WidgetName}State createState() => _${1:WidgetName}State();",
      "}\n",
      "class _${1:index}State extends State<${1:index}> {",
      "  @override",
      "  Widget build(BuildContext context) {",
      "    return Container(",
      "       child: ${2:child},",
      "    );",
      "  }",
      "}"
    ],
    "description": "Create a Stateful widget"
  },
  "Build Method": {
    "prefix": "build",
    "body": [
      "@override",
      "Widget build(BuildContext context) {",
      "  return ${0:};",
      "}"
    ],
    "description": "Describes the part of the user interface represented by this widget."
  },
  "Custom Painter ": {
    "prefix": "customPainter",
    "body": [
      "class ${0:name}Painter extends CustomPainter {",
      "",
      "  @override",
      "  void paint(Canvas canvas, Size size) {",
      "  }",
      "",
      "  @override",
      "  bool shouldRepaint(${0:name}Painter oldDelegate) => false;",
      "",
      "  @override",
      "  bool shouldRebuildSemantics(${0:name}Painter oldDelegate) => false;",
      "}"
    ],
    "description": "Used for creating custom paint"
  },
  "Custom Clipper ": {
    "prefix": "customClipper",
    "body": [
      "class ${0:name}Clipper extends CustomClipper<Path> {",
      "",
      "  @override",
      "  Path getClip(Size size) {",
      "  }",
      "",
      "  @override",
      "  bool shouldReclip(CustomClipper<Path> oldClipper) => false;",
      "}"
    ],
    "description": "Used for creating custom shapes"
  },
  "InitState ": {
    "prefix": "initS",
    "body": [
      "@override",
      "void initState() { ",
      "  super.initState();",
      "  ${0:}",
      "}"
    ],
    "description": "Called when this object is inserted into the tree. The framework will call this method exactly once for each State object it creates."
  },
  "Dispose": {
    "prefix": "dis",
    "body": [
      "@override",
      "void dispose() { ",
      "  ${0:}",
      "  super.dispose();",
      "}"
    ],
    "description": "Called when this object is removed from the tree permanently. The framework calls this method when this State object will never build again."
  },
  "Reassemble": {
    "prefix": "reassemble",
    "body": [
      "@override",
      "void reassemble(){",
      "  super.reassemble();",
      "  ${0:}",
      "}"
    ],
    "description": "Called whenever the application is reassembled during debugging, for example during hot reload."
  },
  "didChangeDependencies": {
    "prefix": "didChangeD",
    "body": [
      "@override",
      "void didChangeDependencies() {",
      "  super.didChangeDependencies();",
      "  ${0:}",
      "}"
    ],
    "description": "Called when a dependency of this State object changes"
  },
  "didUpdateWidget": {
    "prefix": "didUpdateW",
    "body": [
      "@override",
      "void didUpdateWidget (${1:Type} ${2:oldWidget}) {",
      "  super.didUpdateWidget(${2:oldWidget});",
      "  ${0:}",
      "}"
    ],
    "description": "Called whenever the widget configuration changes."
  },
  "ListView.Builder": {
    "prefix": "listViewB",
    "body": [
      "ListView.builder(",
      "  itemCount: ${1:1},",
      "  itemBuilder: (BuildContext context, int index) {",
      "  return ${2:};",
      " },",
      "),"
    ],
    "description": "Creates a scrollable, linear array of widgets that are created on demand.Providing a non-null `itemCount` improves the ability of the [ListView] to estimate the maximum scroll extent."
  },
  "ListView.Separated": {
    "prefix": "listViewS",
    "body": [
      "ListView.separated(",
      "  itemCount: ${1:1},",
      "  separatorBuilder: (BuildContext context, int index) {",
      "  return ${2:};",
      " },",
      "  itemBuilder: (BuildContext context, int index) {",
      "  return ${3:};",
      " },",
      "),"
    ],
    "description": "Creates a fixed-length scrollable linear array of list 'items' separated by list item 'separators'."
  },
  "Custom Scroll View": {
    "prefix": "customScrollV",
    "body": [
      "CustomScrollView(",
      "  slivers: <Widget>[",
      "  ${0:}",
      "  ],",
      "),"
    ],
    "description": "Creates a `ScrollView` that creates custom scroll effects using slivers. If the `primary` argument is true, the `controller` must be null."
  },
  "Stream Builder": {
    "prefix": "streamBldr",
    "body": [
      "StreamBuilder(",
      "  stream: ${1:stream},",
      "  initialData: ${2:initialData},",
      "  builder: (BuildContext context, AsyncSnapshot snapshot) {",
      "    return Container(",
      "      child: ${3:child},",
      "    );",
      "  },",
      "),"
    ],
    "description": "Creates a new `StreamBuilder` that builds itself based on the latest snapshot of interaction with the specified `stream`"
  },
  "Animated Builder": {
    "prefix": "animatedBldr",
    "body": [
      "AnimatedBuilder(",
      "  animation: ${1:animation},",
      "  child: ${2:child},",
      "  builder: (BuildContext context, Widget child) {",
      "    return ${3:};",
      "  },",
      "),"
    ],
    "description": "Creates an Animated Builder. The widget specified to `child` is passed to the `builder` "
  },
  "Stateful Builder": {
    "prefix": "statefulBldr",
    "body": [
      "StatefulBuilder(",
      "  builder: (BuildContext context, setState) {",
      "    return ${0:};",
      "  },",
      "),"
    ],
    "description": "Creates a widget that both has state and delegates its build to a callback. Useful for rebuilding specific sections of the widget tree."
  },
  "Orientation Builder": {
    "prefix": "orientationBldr",
    "body": [
      "OrientationBuilder(",
      "  builder: (BuildContext context, Orientation orientation) {",
      "    return Container(",
      "      child: ${3:child},",
      "    );",
      "  },",
      "),"
    ],
    "description": "Creates a builder which allows for the orientation of the device to be specified and referenced"
  },
  "Layout Builder": {
    "prefix": "layoutBldr",
    "body": [
      "LayoutBuilder(",
      "  builder: (BuildContext context, BoxConstraints constraints) {",
      "    return ${0:};",
      "  },",
      "),"
    ],
    "description": "Similar to the Builder widget except that the framework calls the builder function at layout time and provides the parent widget's constraints."
  },
  "Single Child ScrollView": {
    "prefix": "singleChildSV",
    "body": [
      "SingleChildScrollView(",
      "  controller: ${1:controller,}",
      "  child: Column(",
      "    ${0:}",
      "  ),",
      "),"
    ],
    "description": "Creates a scroll view with a single child"
  },
  "Future Builder": {
    "prefix": "futureBldr",
    "body": [
      "FutureBuilder(",
      "  future: ${1:Future},",
      "  initialData: ${2:InitialData},",
      "  builder: (BuildContext context, AsyncSnapshot snapshot) {",
      "    return ${3:};",
      "  },",
      "),"
    ],
    "description": "Creates a Future Builder. This builds itself based on the latest snapshot of interaction with a Future."
  },
  "No Such Method": {
    "prefix": "nosm",
    "body": [
      "@override",
      "dynamic noSuchMethod(Invocation invocation) {",
      "  ${1:}",
      "}"
    ],
    "description": "This method is invoked when a non-existent method or property is accessed."
  },
  "Inherited Widget": {
    "prefix": "inheritedW",
    "body": [
      "class ${1:Name} extends InheritedWidget {",
      "  ${1:Name}({Key? key, this.child}) : super(key: key, child: child);",
      "",
      "  final Widget child;",
      "",
      "  static ${1:Name} of(BuildContext context) {",
      "    return context.dependOnInheritedWidgetOfExactType<${1:Name}>();",
      "  }",
      "",
      "  @override",
      "  bool updateShouldNotify(${1:Name} oldWidget) {",
      "    return ${2:true};",
      "  }",
      "}"
    ],
    "description": "Class used to propagate information down the widget tree"
  },
  "Mounted": {
    "prefix": "mounted",
    "body": [
      "@override",
      "bool get mounted {",
      "  ${0:}",
      "}"
    ],
    "description": "Whether this State object is currently in a tree."
  },
  "Sink": {
    "prefix": "snk",
    "body": [
      "Sink<${1:type}> get ${2:name} => _${2:name}Controller.sink;",
      "final _${2:name}Controller = StreamController<${1:type}>();"
    ],
    "description": "A Sink is the input of a stream."
  },
  "Stream": {
    "prefix": "strm",
    "body": [
      "Stream<${1:type}> get ${2:name} => _${2:name}Controller.stream;",
      "final _${2:name}Controller = StreamController<${1:type}>();"
    ],
    "description": "A source of asynchronous data events. A stream can be of any data type <T>"
  },
  "Subject": {
    "prefix": "subj",
    "body": [
      "Stream<${1:type}> get ${2:name} => _${2:name}Subject.stream;",
      "final _${2:name}Subject = BehaviorSubject<${1:type}>();"
    ],
    "description": "A BehaviorSubject is also a broadcast StreamController which returns an Observable rather than a Stream."
  },
  "toString": {
    "prefix": "toStr",
    "body": [
      "@override",
      "String toString() {",
      "return ${1:toString};",
      " }"
    ],
    "description": "Returns a string representation of this object."
  },
  "debugPrint": {
    "prefix": "debugP",
    "body": [
      "debugPrint(${1:statement});"
    ],
    "description": "Prints a message to the console, which you can access using the flutter tool's `logs` command (flutter logs)."
  },
  "Material Package": {
    "prefix": "importM",
    "body": "import 'package:flutter/material.dart';",
    "description": "Import flutter material package"
  },
  "Cupertino Package": {
    "prefix": "importC",
    "body": "import 'package:flutter/cupertino.dart';",
    "description": "Import Flutter Cupertino package"
  },
  "flutter_test Package": {
    "prefix": "importFT",
    "body": "import 'package:flutter_test/flutter_test.dart';",
    "description": "Import flutter_test package"
  },
  "Material App": {
    "prefix": "mateapp",
    "description": "Create a MaterialApp",
    "body": [
      "import 'package:flutter/material.dart';",
      " ",
      "void main() => runApp(MyApp());",
      " ",
      "class MyApp extends StatelessWidget {",
      "  @override",
      "  Widget build(BuildContext context) {",
      "    return MaterialApp(",
      "      title: 'Material App',",
      "      home: Scaffold(",
      "        appBar: AppBar(",
      "          title: Text('Material App Bar'),",
      "        ),",
      "        body: Center(",
      "          child: Container(",
      "            child: Text('Hello World'),",
      "          ),",
      "        ),",
      "      ),",
      "    );",
      "  }",
      "}"
    ]
  },
  "Cupertino App": {
    "prefix": "cupeapp",
    "description": "Create a CupertinoApp",
    "body": [
      "import 'package:flutter/cupertino.dart';",
      " ",
      "void main() => runApp(MyApp());",
      " ",
      "class MyApp extends StatelessWidget {",
      "  @override",
      "  Widget build(BuildContext context) {",
      "    return CupertinoApp(",
      "      title: 'Cupertino App',",
      "      home: CupertinoPageScaffold(",
      "        navigationBar: CupertinoNavigationBar(",
      "          middle: Text('Cupertino App Bar'),",
      "        ),",
      "        child: Center(",
      "          child: Container(",
      "            child: Text('Hello World'),",
      "          ),",
      "        ),",
      "      ),",
      "    );",
      "  }",
      "}"
    ]
  },
  "Tween Animation Builder": {
    "prefix": "tweenAnimationBuilder",
    "body": [
      "TweenAnimationBuilder(",
      "    duration: ${1:const Duration(),}",
      "    tween: ${2:Tween(),}",
      "    builder: (BuildContext context, ${3:dynamic} value, Widget child) {",
      "       return ${4:Container();}",
      "     },",
      " ),  "
    ],
    "description": "Widget builder that animates a property of a Widget to a target value whenever the target value changes."
  },
  "Value Listenable Builder": {
    "prefix": "valueListenableBuilder",
    "body": [
      "ValueListenableBuilder(",
      "    valueListenable: ${1: null},",
      "    builder: (BuildContext context, ${2:dynamic} value, Widget child) {",
      "       return ${3: Container();}",
      "    },",
      " ),"
    ],
    "description": "Given a ValueListenable<T> and a builder which builds widgets from concrete values of T, this class will automatically register itself as a listener of the ValueListenable and call the builder with updated values when the value changes."
  },
  "Test": {
    "prefix": "f-test",
    "body": [
      "test(",
      "   \"${1:test description}\",",
      "   () {},",
      ");"
    ],
    "description": "Create a test function"
  },
  "Test Widgets": {
    "prefix": "widgetTest",
    "body": [
      "testWidgets(",
      "   \"${1:test description}\",",
      "   (WidgetTester tester) async {},",
      ");"
    ],
    "description": "Create a testWidgets function"
  },
  "future": {
    "prefix": "future",
    "body": "Future<${1:void}>",
    "description": "Future annotation"
  },
  "class": {
    "prefix": "class",
    "body": "class ${1:Name} ${2:extends ${3:SuperClass}}{\n\tfinal ${4:var};\n}",
    "description": "Create a class"
  },
  "vm": {
    "prefix": "vm",
    "body": "class ${1:Name}ViewModel extends BaseViewModel {\n\t${1:Name}ViewModel(BuildContext context) : super(context: context);\n\n\tvoid ${3:someMethod}() {\n\t\t// TODO\n\t}\n}",
    "description": "ViewModel"
  }
}
