{
  "return": {
    "prefix": "rt",
    "body": [
      "return $0"
    ],
    "description": "return value"
  },
  "assigment": {
    "prefix": "ll",
    "body": [
      "local ${1:varName} = ${0:value}"
    ],
    "description": "create a variable"
  },
  "local": {
    "prefix": "l",
    "body": [
      "local ${0}"
    ],
    "description": "create a variable"
  },
  "locreq": {
    "prefix": "lreq",
    "body": [
      "local ${1:var} = require(\"${2:module}\")"
    ],
    "description": "Require module as a variable"
  },
  "class": {
    "prefix": "cl",
    "body": [
      "${1:className} = {}\n",
      "$1.${2:new} = function($3)",
      "\tlocal ${4:varName} = ${5:value}\n",
      "\t${6: --code}\n",
      "\treturn $4",
      "end"
    ],
    "description": "Create a class"
  },
  "if": {
    "prefix": "if",
    "body": [
      "if ${1:true} then",
      "\t$0",
      "end"
    ]
  },
  "elseif": {
    "prefix": "elseif",
    "body": [
      "elseif ${1:true} then",
      "\t$0"
    ]
  },
  "for": {
    "prefix": "for",
    "body": [
      "for ${1:i}=${2:1},${3:10} do",
      "\t$0",
      "end"
    ],
    "description": "for loop range"
  },
  "foreach": {
    "prefix": "foreach",
    "body": [
      "for i, ${1:x} in pairs(${2:table}) do",
      "\t$0",
      "end"
    ]
  },
  "forline": {
    "prefix": "forline",
    "body": [
      "f = io.open(${1:\"${2:filename}\"}, \"${3:r}\")\n",
      "while true do",
      "\tline = f:read()",
      "\tif line == nil then break end\n",
      "\t${0:-- code}",
      "end"
    ],
    "description": "read file line by line"
  },
  "function": {
    "prefix": "fu",
    "body": [
      "function ${1:name}($2)",
      "\t${0:-- code}",
      "end"
    ]
  },
  "inline-function": {
    "prefix": "f=",
    "body": [
      "local ${1:name} = function($2)",
      "\t${0:-- code}",
      "end"
    ]
  },
  "print": {
    "prefix": "p",
    "body": [
      "print(${0})"
    ]
  },
  "self": {
    "prefix": "self:",
    "body": [
      "function self:${1:methodName}($2)",
      "\t$0",
      "end"
    ]
  },
  "while": {
    "prefix": "while",
    "body": [
      "while ${1:true} do",
      "\t$0",
      "end"
    ]
  },
  "pcall": {
    "prefix": "pca",
    "body": [
      "pcall(${1:function})"
    ],
    "description": "Protect call a function"
  },
  "locpcall": {
    "prefix": "lpca",
    "body": [
      "local ${1:status}, ${2:err_or_value} = pcall(${3:function})"
    ],
    "description": "Protect call a function as a variable"
  },
  "func": {
    "prefix": "function",
    "body": [
      "function()",
      "\t${0: --code goes here}",
      "end"
    ],
    "description": "Create an endwise function"
  },
  "pcallRequire": {
    "prefix": "rep",
    "body": [
      "pcall(require(\"${1:moduleName}\"))"
    ],
    "description": "Protect call a require module"
  },
  "_G": {
    "body": "_G(${0:...})",
    "description": "5.1,5.2,5.3\n\n_G",
    "prefix": "_G",
    "scope": "source.lua"
  },
  "assert": {
    "body": "assert(${1:v}${2:[, message]})",
    "description": "5.1,5.2,5.3\n\nassert()",
    "prefix": "assert",
    "scope": "source.lua"
  },
  "collectgarbage": {
    "body": "collectgarbage(${1:[opt]}${2:[, arg]})",
    "description": "5.1,5.2,5.3\n\ncollectgarbage()",
    "prefix": "collectgarbage",
    "scope": "source.lua"
  },
  "coroutine.create": {
    "body": "coroutine.create( ${1:function} )",
    "description": "5.1,5.2,5.3\n\ncoroutine.create",
    "prefix": "coroutine.create",
    "scope": "source.lua"
  },
  "coroutine.isyieldable": {
    "body": "coroutine.isyieldable( )",
    "description": "5.3\n\ncoroutine.isyieldable",
    "prefix": "coroutine.isyieldable",
    "scope": "source.lua"
  },
  "coroutine.resume": {
    "body": "coroutine.resume( ${1:co}${2:[, val1, ···]} )",
    "description": "5.1,5.2,5.3\n\ncoroutine.resume",
    "prefix": "coroutine.resume",
    "scope": "source.lua"
  },
  "coroutine.running": {
    "body": "coroutine.running( )",
    "description": "5.1,5.2,5.3\n\ncoroutine.running",
    "prefix": "coroutine.running",
    "scope": "source.lua"
  },
  "coroutine.status": {
    "body": "coroutine.status( ${1:co} )",
    "description": "5.1,5.2,5.3\n\ncoroutine.status",
    "prefix": "coroutine.status",
    "scope": "source.lua"
  },
  "coroutine.wrap": {
    "body": "coroutine.wrap( ${1:function} )",
    "description": "5.1,5.2,5.3\n\ncoroutine.wrap",
    "prefix": "coroutine.wrap",
    "scope": "source.lua"
  },
  "coroutine.yield": {
    "body": "coroutine.yield( ${1:...} )",
    "description": "5.1,5.2,5.3\n\ncoroutine.yield",
    "prefix": "coroutine.yield",
    "scope": "source.lua"
  },
  "fori": {
    "body": "for ${1:i},${2:v} in ipairs(${3:table_name}) do\n\t${0:print(i,v)}\nend",
    "description": "for i,v in ipairs()",
    "prefix": "fori",
    "scope": "source.lua"
  },
  "forp": {
    "body": "for ${1:k},${2:v} in pairs(${3:table_name}) do\n\t${0:print(k,v)}\nend",
    "description": "for k,v in pairs()",
    "prefix": "forp",
    "scope": "source.lua"
  },
  "fn": {
    "body": "function ${1:function_name}(${2:...})\n\t${0:-- body}\nend",
    "description": "function",
    "prefix": "fn",
    "scope": "source.lua"
  },
  "getfenv": {
    "body": "getfenv(${0:...})",
    "description": "5.1\n\ngetfenv ([f])",
    "prefix": "getfenv",
    "scope": "source.lua"
  },
  "getmetatable": {
    "body": "getmetatable(${1:object})",
    "description": "5.1,5.2,5.3\n\ngetmetatable (object)",
    "prefix": "getmetatable",
    "scope": "source.lua"
  },
  "ifel": {
    "body": "if ${1:condition} then\n\t${2:-- body}\nelse\n\t${0:-- body}\nend",
    "description": "ifel",
    "prefix": "ifel",
    "scope": "source.lua"
  },
  "describe": {
    "prefix": "describe",
    "body": [
      "describe('${1:Title}', function()",
      "\t${2}",
      "end)"
    ]
  },
  "doc": {
    "prefix": "doc",
    "body": [
      "-----------------------------------------------------------------------------//",
      "-- ${0:document}",
      "-----------------------------------------------------------------------------//"
    ]
  },
  "apifun": {
    "prefix": "api.",
    "body": [
      "vim.api.nvim_${1:buf}_${2:get}_${3:name}"
    ]
  },
  "api": {
    "prefix": "lapi",
    "body": [
      "local api = vim.api"
    ]
  },
  "fmt": {
    "prefix": "lfmt",
    "body": [
      "local fmt = string.format"
    ]
  },
  "inspect": {
    "prefix": "vi",
    "body": [
      "print(\"${1}: \" .. vim.inspect(${1}))"
    ]
  },
  "fun": {
    "body": "function ${1:function_name}(${2:...})\n\t${0:-- body}\nend",
    "description": "function",
    "prefix": "fun",
    "scope": "source.lua"
  },
  "ipairs": {
    "body": "ipairs(${0:...})",
    "description": "5.1,5.2,5.3\n\nipairs (t)",
    "prefix": "ipairs",
    "scope": "source.lua"
  },
  "load": {
    "body": "load(${0:...})",
    "description": "5.1,5.2,5.3\n\nload (func [, chunkname])",
    "prefix": "load",
    "scope": "source.lua"
  },
  "loadfile": {
    "body": "loadfile(${0:...})",
    "description": "5.1,5.2,5.3\n\nloadfile ([filename])",
    "prefix": "loadfile",
    "scope": "source.lua"
  },
  "loadstring": {
    "body": "loadstring(${0:...})",
    "description": "5.1\n\nloadstring (string [, chunkname])",
    "prefix": "loadstring",
    "scope": "source.lua"
  },
  "pairs": {
    "body": "pairs(${0:...})",
    "description": "5.1,5.2,5.3\n\npairs (t)",
    "prefix": "pairs",
    "scope": "source.lua"
  },
  "rawequal": {
    "body": "rawequal(${0:...})",
    "description": "5.1,5.2,5.3\n\nrawequal (v1, v2)",
    "prefix": "rawequal",
    "scope": "source.lua"
  },
  "rawget": {
    "body": "rawget(${0:...})",
    "description": "5.1,5.2,5.3\n\nrawget (table, index)",
    "prefix": "rawget",
    "scope": "source.lua"
  },
  "rawlen": {
    "body": "rawlen(${0:...})",
    "description": "5.2,5.3\n\nrawlen (v)",
    "prefix": "rawlen",
    "scope": "source.lua"
  },
  "rawset": {
    "body": "rawset(${0:...})",
    "description": "5.1,5.2,5.3\n\nrawset (table, index, value)",
    "prefix": "rawset",
    "scope": "source.lua"
  },
  "ret": {
    "body": "return ${1:...}",
    "description": "return ...",
    "prefix": "ret",
    "scope": "source.lua"
  },
  "select": {
    "body": "select(${1:index}, ${2:...})",
    "description": "5.1,5.2,5.3\n\nselect (index, ···)",
    "prefix": "select",
    "scope": "source.lua"
  },
  "setfenv": {
    "body": "setfenv(${0:...})",
    "description": "5.1\n\nsetfenv (f, table)",
    "prefix": "setfenv",
    "scope": "source.lua"
  },
  "setmetatable": {
    "body": "setmetatable(${1:table}, ${2:metatable})",
    "description": "5.1,5.2,5.3\n\nsetmetatable (table, metatable)",
    "prefix": "setmetatable",
    "scope": "source.lua"
  },
  "string.byte": {
    "body": "string.byte(${1:s}${2:[, i]}${3:[, j]})",
    "description": "5.1,5.2,5.3\n\nstring.byte",
    "prefix": "string.byte",
    "scope": "source.lua"
  },
  "string.char": {
    "body": "string.char(${1:...})",
    "description": "5.1,5.2,5.3\n\nstring.char",
    "prefix": "string.char",
    "scope": "source.lua"
  },
  "string.dump": {
    "body": "string.dump(${0:...})",
    "description": "5.1,5.2,5.3\n\nstring.dump (function)",
    "prefix": "string.dump",
    "scope": "source.lua"
  },
  "string.find": {
    "body": "string.find(${1:s},${2:pattern}${3:[, init]}${4:[, plain]})",
    "description": "5.1,5.2,5.3\n\nstring.find",
    "prefix": "string.find",
    "scope": "source.lua"
  },
  "string.format": {
    "body": "string.format(\"${1:formatstring}\",${2:...})",
    "description": "5.1,5.2,5.3\n\nstring.format",
    "prefix": "string.format",
    "scope": "source.lua"
  },
  "string.gmatch": {
    "body": "string.gmatch(${1:s},${2:pattern})",
    "description": "5.1,5.2,5.3\n\nstring.gmatch",
    "prefix": "string.gmatch",
    "scope": "source.lua"
  },
  "string.gsub": {
    "body": "string.gsub(${1:s},${2:pattern},${3:repl}${4:[, n]})",
    "description": "5.1,5.2,5.3\n\nstring.gsub",
    "prefix": "string.gsub",
    "scope": "source.lua"
  },
  "string.len": {
    "body": "string.len(${1:s})",
    "description": "5.1,5.2,5.3\n\nstring.len",
    "prefix": "string.len",
    "scope": "source.lua"
  },
  "string.lower": {
    "body": "string.lower(${1:s})",
    "description": "5.1,5.2,5.3\n\nstring.lower",
    "prefix": "string.lower",
    "scope": "source.lua"
  },
  "string.match": {
    "body": "string.match(${1:s},${2:pattern}${3:[, init]})",
    "description": "5.1,5.2,5.3\n\nstring.match",
    "prefix": "string.match",
    "scope": "source.lua"
  },
  "string.pack": {
    "body": "string.pack(${0:...})",
    "description": "5.3\n\nstring.pack (fmt, v1, v2, ...)",
    "prefix": "string.pack",
    "scope": "source.lua"
  },
  "string.packsize": {
    "body": "string.packsize(${0:...})",
    "description": "5.3\n\nstring.packsize (fmt)",
    "prefix": "string.packsize",
    "scope": "source.lua"
  },
  "string.rep": {
    "body": "string.rep(${1:s}, ${2:n}${3:[, rep]})",
    "description": "5.1,5.2,5.3\n\nstring.rep",
    "prefix": "string.rep",
    "scope": "source.lua"
  },
  "string.reverse": {
    "body": "string.reverse(${1:s})",
    "description": "5.1,5.2,5.3\n\nstring.reverse",
    "prefix": "string.reverse",
    "scope": "source.lua"
  },
  "string.sub": {
    "body": "string.sub(${1:s}, ${2:i}${3:[, j]})",
    "description": "5.1,5.2,5.3\n\nstring.sub",
    "prefix": "string.sub",
    "scope": "source.lua"
  },
  "string.unpack": {
    "body": "string.unpack(${0:...})",
    "description": "5.3\n\nstring.unpack (fmt, s [, pos])",
    "prefix": "string.unpack",
    "scope": "source.lua"
  },
  "string.upper": {
    "body": "string.upper(${1:s})",
    "description": "5.1,5.2,5.3\n\nstring.upper",
    "prefix": "string.upper",
    "scope": "source.lua"
  },
  "table.concat": {
    "body": "table.concat(${1:tablename}${2:, \", \"}${3:, start_index}${4:, end_index})",
    "description": "5.1,5.2,5.3\n\ntable.concat",
    "prefix": "table.concat",
    "scope": "source.lua"
  },
  "table.insert": {
    "body": "table.insert(${1:list},${2: [pos,]}${3: value})",
    "description": "5.1,5.2,5.3\n\ntable.insert",
    "prefix": "table.insert",
    "scope": "source.lua"
  },
  "table.maxn": {
    "body": "table.maxn(${0:...})",
    "description": "5.1\n\ntable.maxn (table)",
    "prefix": "table.maxn",
    "scope": "source.lua"
  },
  "table.move": {
    "body": "table.move(${0:...})",
    "description": "5.3\n\ntable.move (a1, f, e, t [,a2])",
    "prefix": "table.move",
    "scope": "source.lua"
  },
  "table.pack": {
    "body": "table.pack(${0:...})",
    "description": "5.2,5.3\n\ntable.pack (...)",
    "prefix": "table.pack",
    "scope": "source.lua"
  },
  "table.remove": {
    "body": "table.remove(${1:list},${2: [pos,]})",
    "description": "5.1,5.2,5.3\n\ntable.remove",
    "prefix": "table.remove",
    "scope": "source.lua"
  },
  "table.sort": {
    "body": "table.sort(${1:tablename}${2:, sortfunction})",
    "description": "5.1,5.2,5.3\n\ntable.sort",
    "prefix": "table.sort",
    "scope": "source.lua"
  },
  "table.unpack": {
    "body": "table.unpack(${0:...})",
    "description": "5.2,5.3\n\ntable.unpack (list [, i [, j]])",
    "prefix": "table.unpack",
    "scope": "source.lua"
  },
  "tonumber": {
    "body": "tonumber(${1:e}${2:[, base]})",
    "description": "5.1,5.2,5.3\n\ntonumber (e [, base])",
    "prefix": "tonumber",
    "scope": "source.lua"
  },
  "tostring": {
    "body": "tostring(${1:v})",
    "description": "5.1,5.2,5.3\n\ntostring (v)",
    "prefix": "tostring",
    "scope": "source.lua"
  },
  "type": {
    "body": "type(${1:v})",
    "description": "5.1,5.2,5.3\n\ntype (v)",
    "prefix": "type",
    "scope": "source.lua"
  },
  "unpack": {
    "body": "unpack(${0:...})",
    "description": "5.1\n\nunpack (list [, i [, j]])",
    "prefix": "unpack",
    "scope": "source.lua"
  },
  "param": {
    "prefix": "param",
    "body": "--- @param ${1:name} ${2:type}",
    "description": "Add annotation"
  },
  "pluginTable": {
    "prefix": "lazy",
    "body": [
      "{",
      "\t\"${1:org/user}/${2:repo}\",",
      "\t${3:-- aditional arguements}",
      "}"
    ],
    "description": "Create a new plugin spec for lazy.nvim"
  },
  "setOption": {
    "prefix": "opt",
    "body": [
      "o.${1:option name} = ${2:option value}"
    ],
    "description": "Set an option."
  },
  "exeCommand": {
    "prefix": "execommand",
    "body": [
      "vim.api.nvim_command(\"${1:command} ${2:args}\")"
    ],
    "description": "Execute a command."
  },
  "exeCmd": {
    "prefix": "execmd",
    "body": [
      "vim.cmd(\"${1:command} ${2:args}\")"
    ],
    "description": "Execute a cmd."
  },
  "setColorscheme": {
    "prefix": "setColorscheme",
    "body": [
      "vim.api.nvim_command(\"colorscheme ${1:name}\")"
    ],
    "description": "Set colorscheme."
  },
  "confPlugin": {
    "prefix": "confPlugin",
    "body": [
      "config = function()",
      "\trequire(\"${1:modulePath}\")",
      "end,"
    ],
    "description": "Create a plugin config."
  },
  "autocmd": {
    "prefix": "autocmd",
    "body": [
      "nvim.api.nvim_create_autocmd(${1:Event(3)}, {",
      "\tcallback = function(${2:Args})",
      "\t\t${3:--code goes here}",
      "\tend,",
      "})"
    ],
    "description": "Create an autocmd."
  },
  "cmd": {
    "prefix": "<cmd",
    "body": "<cmd>${1: --[Stuff goes here]}<CR>",
    "description": "Create a new cmd!"
  }
}
